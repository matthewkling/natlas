class = "data.frame"))
}
vnames <- names(x)
if (length(vnames) != n)
vnames <- character(n)
no.vn <- !nzchar(vnames)
vlist <- vnames <- as.list(vnames)
nrows <- ncols <- integer(n)
print(n)
for (i in seq_len(n)) {
xi <- if (is.character(x[[i]]) || is.list(x[[i]]))
as.data.frame(x[[i]], optional = TRUE, stringsAsFactors = stringsAsFactors)
else as.data.frame(x[[i]], optional = TRUE)
xiB <- x[[i]]  ######
#print(i)
print(str(xi)) ######
print(str(xiB)) ######
nrows[i] <- .row_names_info(xi)
ncols[i] <- length(xi)
namesi <- names(xi)
if (ncols[i] > 1L) {
if (length(namesi) == 0L)
namesi <- seq_len(ncols[i])
if (no.vn[i])
vnames[[i]] <- namesi
else vnames[[i]] <- paste(vnames[[i]], namesi, sep = ".")
}
else {
if (length(namesi))
vnames[[i]] <- namesi
else if (no.vn[[i]]) {
tmpname <- deparse(object[[i]], nlines = 1L)[1L]
if (substr(tmpname, 1L, 2L) == "I(") {
ntmpn <- nchar(tmpname, "c")
if (substr(tmpname, ntmpn, ntmpn) == ")")
tmpname <- substr(tmpname, 3L, ntmpn - 1L)
}
vnames[[i]] <- tmpname
}
}
if (mirn && nrows[i] > 0L) {
rowsi <- attr(xi, "row.names")
nc <- nchar(rowsi, allowNA = FALSE)
nc <- nc[!is.na(nc)]
if (length(nc) && any(nc))
row.names <- data.row.names(row.names, rowsi, i)
}
nrows[i] <- abs(nrows[i])
vlist[[i]] <- xi
}
#print(class(vlist))
#print(str(vlist))
#return(vlist) ###############
nr <- max(nrows)
for (i in seq_len(n)[nrows < nr]) {
xi <- vlist[[i]]
if (nrows[i] > 0L && (nr%%nrows[i] == 0L)) {
xi <- unclass(xi)
fixed <- TRUE
for (j in seq_along(xi)) {
xi1 <- xi[[j]]
if (is.vector(xi1) || is.factor(xi1))
xi[[j]] <- rep(xi1, length.out = nr)
else if (is.character(xi1) && inherits(xi1, "AsIs"))
xi[[j]] <- structure(rep(xi1, length.out = nr),
class = class(xi1))
else if (inherits(xi1, "Date") || inherits(xi1,
"POSIXct"))
xi[[j]] <- rep(xi1, length.out = nr)
else {
fixed <- FALSE
break
}
}
if (fixed) {
vlist[[i]] <- xi
next
}
}
stop(gettextf("arguments imply differing number of rows: %s",
paste(unique(nrows), collapse = ", ")), domain = NA)
}
value <- unlist(vlist, recursive = FALSE, use.names = FALSE)
vnames <- unlist(vnames[ncols > 0L])
noname <- !nzchar(vnames)
if (any(noname))
vnames[noname] <- paste("Var", seq_along(vnames), sep = ".")[noname]
if (check.names)
vnames <- make.names(vnames, unique = TRUE)
names(value) <- vnames
if (!mrn) {
if (length(row.names) == 1L && nr != 1L) {
if (is.character(row.names))
row.names <- match(row.names, vnames, 0L)
if (length(row.names) != 1L || row.names < 1L ||
row.names > length(vnames))
stop("'row.names' should specify one of the variables")
i <- row.names
row.names <- value[[i]]
value <- value[-i]
}
else if (!is.null(row.names) && length(row.names) !=
nr)
stop("row names supplied are of the wrong length")
}
else if (!is.null(row.names) && length(row.names) != nr) {
warning("row names were found from a short variable and have been discarded")
row.names <- NULL
}
if (is.null(row.names))
row.names <- .set_row_names(nr)
else {
if (is.object(row.names) || !is.integer(row.names))
row.names <- as.character(row.names)
if (anyNA(row.names))
stop("row names contain missing values")
if (anyDuplicated(row.names))
stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),
collapse = ", ")), domain = NA)
}
attr(value, "row.names") <- row.names
attr(value, "class") <- "data.frame"
value
}
x1 <- df(z)
xiB <- x[[i]]  ######
#print(i)
print(str(xi)) ######
print(str(xiB)) ######
xiB <- x[[i]]  ######
#print(i)
print(str(xi)) ######
print(str(xiB)) ######
df <- function (..., row.names = NULL, check.rows = FALSE, check.names = TRUE,
stringsAsFactors = default.stringsAsFactors()) {
data.row.names <- if (check.rows && is.null(row.names))
function(current, new, i) {
if (is.character(current))
new <- as.character(new)
if (is.character(new))
current <- as.character(current)
if (anyDuplicated(new))
return(current)
if (is.null(current))
return(new)
if (all(current == new) || all(current == ""))
return(new)
stop(gettextf("mismatch of row names in arguments of 'data.frame', item %d",
i), domain = NA)
}
else function(current, new, i) {
if (is.null(current)) {
if (anyDuplicated(new)) {
warning(gettextf("some row.names duplicated: %s --> row.names NOT used",
paste(which(duplicated(new)), collapse = ",")),
domain = NA)
current
}
else new
}
else current
}
object <- as.list(substitute(list(...)))[-1L]
mirn <- missing(row.names)
mrn <- is.null(row.names)
x <- list(...)
#return(x)
#x <- x1
x <- x[[1]] ##########
n <- length(x)
if (n < 1L) {
if (!mrn) {
if (is.object(row.names) || !is.integer(row.names))
row.names <- as.character(row.names)
if (anyNA(row.names))
stop("row names contain missing values")
if (anyDuplicated(row.names))
stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),
collapse = ", ")), domain = NA)
}
else row.names <- integer()
return(structure(list(), names = character(), row.names = row.names,
class = "data.frame"))
}
vnames <- names(x)
if (length(vnames) != n)
vnames <- character(n)
no.vn <- !nzchar(vnames)
vlist <- vnames <- as.list(vnames)
nrows <- ncols <- integer(n)
for (i in seq_len(n)) {
xi <- if (is.character(x[[i]]) || is.list(x[[i]]))
as.data.frame(x[[i]], optional = TRUE, stringsAsFactors = stringsAsFactors)
else as.data.frame(x[[i]], optional = TRUE)
xiB <- x[[i]]  ######
#print(i)
print(str(xi)) ######
print(str(xiB)) ######
nrows[i] <- .row_names_info(xi)
ncols[i] <- length(xi)
namesi <- names(xi)
if (ncols[i] > 1L) {
if (length(namesi) == 0L)
namesi <- seq_len(ncols[i])
if (no.vn[i])
vnames[[i]] <- namesi
else vnames[[i]] <- paste(vnames[[i]], namesi, sep = ".")
}
else {
if (length(namesi))
vnames[[i]] <- namesi
else if (no.vn[[i]]) {
tmpname <- deparse(object[[i]], nlines = 1L)[1L]
if (substr(tmpname, 1L, 2L) == "I(") {
ntmpn <- nchar(tmpname, "c")
if (substr(tmpname, ntmpn, ntmpn) == ")")
tmpname <- substr(tmpname, 3L, ntmpn - 1L)
}
vnames[[i]] <- tmpname
}
}
if (mirn && nrows[i] > 0L) {
rowsi <- attr(xi, "row.names")
nc <- nchar(rowsi, allowNA = FALSE)
nc <- nc[!is.na(nc)]
if (length(nc) && any(nc))
row.names <- data.row.names(row.names, rowsi, i)
}
nrows[i] <- abs(nrows[i])
vlist[[i]] <- xi
}
#print(class(vlist))
#print(str(vlist))
#return(vlist) ###############
nr <- max(nrows)
for (i in seq_len(n)[nrows < nr]) {
xi <- vlist[[i]]
if (nrows[i] > 0L && (nr%%nrows[i] == 0L)) {
xi <- unclass(xi)
fixed <- TRUE
for (j in seq_along(xi)) {
xi1 <- xi[[j]]
if (is.vector(xi1) || is.factor(xi1))
xi[[j]] <- rep(xi1, length.out = nr)
else if (is.character(xi1) && inherits(xi1, "AsIs"))
xi[[j]] <- structure(rep(xi1, length.out = nr),
class = class(xi1))
else if (inherits(xi1, "Date") || inherits(xi1,
"POSIXct"))
xi[[j]] <- rep(xi1, length.out = nr)
else {
fixed <- FALSE
break
}
}
if (fixed) {
vlist[[i]] <- xi
next
}
}
stop(gettextf("arguments imply differing number of rows: %s",
paste(unique(nrows), collapse = ", ")), domain = NA)
}
value <- unlist(vlist, recursive = FALSE, use.names = FALSE)
vnames <- unlist(vnames[ncols > 0L])
noname <- !nzchar(vnames)
if (any(noname))
vnames[noname] <- paste("Var", seq_along(vnames), sep = ".")[noname]
if (check.names)
vnames <- make.names(vnames, unique = TRUE)
names(value) <- vnames
if (!mrn) {
if (length(row.names) == 1L && nr != 1L) {
if (is.character(row.names))
row.names <- match(row.names, vnames, 0L)
if (length(row.names) != 1L || row.names < 1L ||
row.names > length(vnames))
stop("'row.names' should specify one of the variables")
i <- row.names
row.names <- value[[i]]
value <- value[-i]
}
else if (!is.null(row.names) && length(row.names) !=
nr)
stop("row names supplied are of the wrong length")
}
else if (!is.null(row.names) && length(row.names) != nr) {
warning("row names were found from a short variable and have been discarded")
row.names <- NULL
}
if (is.null(row.names))
row.names <- .set_row_names(nr)
else {
if (is.object(row.names) || !is.integer(row.names))
row.names <- as.character(row.names)
if (anyNA(row.names))
stop("row names contain missing values")
if (anyDuplicated(row.names))
stop(gettextf("duplicate row.names: %s", paste(unique(row.names[duplicated(row.names)]),
collapse = ", ")), domain = NA)
}
attr(value, "row.names") <- row.names
attr(value, "class") <- "data.frame"
value
}
x1 <- df(z)
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i], size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)])
}
# serialize to json, and indent
json <- prettify(toJSON(p))
write(json, "taxonomy.json")
library(jsonlite)
json <- prettify(toJSON(p))
write(json, "taxonomy.json")
length(json)
nchar(json)
substr(json, 1, 100)
json <- toJSON(p)
substr(json, 1, 100)
json <- gsub('name":[',
'name":"',
json)
json <- gsub('name":\\[',
'name":"',
json)
substr(json, 1, 100)
json <- toJSON(p)
json <- gsub('name":\\[',
'name":',
json)
jsonn <- gsub('name":\\[',
'name":',
json)
substr(jsonn, 1, 100)
jsonn <- gsub('\\],"children',
',"children',
jsonn)
substr(jsonn, 1, 100)
json <- prettify(json)
json <- toJSON(p)
jsonn <- gsub('name":\\[',
'name":',
json)
jsonn <- gsub('\\],"children',
',"children',
jsonn)
substr(json, 1, 100)
substr(jsonn, 1, 100)
json <- prettify(json)
json <- prettify(jsonn)
write(json, "taxonomy.json")
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
json <- prettify(jsonn)
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- substr(jsonn, 1, 10)
jsonn <- substr(jsonn, nchar(jsonn)-10, nchar(jsonn))
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- substr(jsonn, 1, 10)
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
substr(jsonn, 1, 10)
substr(jsonn, nchar(jsonn)-10, nchar(jsonn))
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
substr(jsonn, 1, 10)
substr(jsonn, nchar(jsonn)-10, nchar(jsonn))
json <- prettify(jsonn)
write(json, "taxonomy.json")
nrow(d)
head(d)
filter(d, family=="Accipitridae")
d <- filter(d, family=="Accipitridae")
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i], size=d$n_records[i]))
group_taxa <- function(data, groupings){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, children=data[children])
})
}
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)])
}
json <- toJSON(p)
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
json <- prettify(jsonn)
write(json, "taxonomy.json")
p <- lapply(1:nrow(d), function(i) list(name=d$species[i], size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)])
}
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
json <- prettify(jsonn)
write(json, "taxonomy.json")
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i], size=d$n_records[i]))
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i], size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)])
}
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
json <- prettify(jsonn)
write(json, "taxonomy.json")
json <- toJSON(p)
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('children":\\[\\[', 'children":\\[', json)
substr(jsonn, 1, 200)
substr(jsonn, 1, 1000)
jsonn <- gsub('children":\\]\\]', 'children":\\]', json)
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('children":\\[\\[', 'children":\\[', json)
jsonn <- gsub('\\]\\]', '\\]', json)
jsonn <- gsub('\\],\\[', ',', json)
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
json <- prettify(jsonn)
write(json, "taxonomy.json")
write(jsonn, "taxonomy.json")
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('children":\\[\\[', 'children":\\[', json)
jsonn <- gsub('\\]\\]', '\\]', json)
jsonn <- gsub('\\],\\[', ',', json)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
json <- toJSON(p)
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
source('~/Documents/inviz/taxorama/d3_sandbox/taxonomy/phylogeny.R', echo=TRUE)
