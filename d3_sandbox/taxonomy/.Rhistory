}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 0,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
table(nc)
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
substr(jsonn, nchar(jsonn)-50,nchar(jsonn))
substr(jsonn, 1, 1000)
d <- filter(d, kingdom=="Animalia")
d <- filter(d, kingdom=="Animalia")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
source('~/Documents/inviz/taxorama/d3_sandbox/taxonomy/phylogeny.R', echo=TRUE)
d <- filter(f, kingdom=="Plantae")
d <- filter(f, kingdom=="Animalia")
d <- filter(f, kingdom=="Plantae")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
d <- filter(f, kingdom=="Plantae")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
d <- filter(f, kingdom=="Animalia")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
d <- filter(f, kingdom=="Fungi")
d <- filter(f, kingdom=="Fungi")
d <- filter(f, kingdom=="Fungi")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
d <- filter(f, kingdom=="Fungi")
d <- f
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
dable(d$kingdom)
table(d$kingdom)
?table
table(d$kingdom, useNA="ifany")
table(d$kingdom, useNA="always")
d <- f
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
jsonn <- prettify(jsonn)
d <- f
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
d <- filter(f, kingdom=="Plantae")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
d <- filter(f, kingdom=="Animalia")
# remove records with missing taxonomy
d <- d[apply(dplyr::select(d, -n_records), 1, function(x)min(nchar(x))) > 2,]
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
# for expediency during testing
d <- filter(f, class=="Aves")
# leaf-level nodes have data on species and frequency
p <- lapply(1:nrow(d), function(i) data.frame(name=d$species[i],
level="species",
size=d$n_records[i]))
# function aggregates taxa list into parent clades
group_taxa <- function(data, groupings, level){
parents <- unique(groupings[,1])
lapply(parents, function(x){
children <- which(groupings[,1]==x)
list(name=x, level=level, children=data[children])
})
}
# apply over all taxonomic levels, generating tree-like list
levels <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
for(level in rev(levels)[2:length(levels)]){
if(level=="species") next()
child_level <- levels[match(level, levels)+1]
p <- group_taxa(p, d[,c(level, child_level)], level)
}
### convert to JSON format
# serialize to json
json <- toJSON(p)
# remove brackets from taxon names to match target format
jsonn <- gsub('name":\\[', 'name":', json)
jsonn <- gsub('\\],"level', ',"level', jsonn)
jsonn <- gsub('level":\\[', 'level":', jsonn)
jsonn <- gsub('\\],"children', ',"children', jsonn)
jsonn <- gsub('\\[\\[', '[', jsonn)
jsonn <- gsub('\\]\\]', '\\]', jsonn)
jsonn <- gsub('\\],\\[', ',', jsonn)
# remove outermost brackets to match target format
jsonn <- substr(jsonn, 2, nchar(jsonn)-1)
# format and export
jsonn <- prettify(jsonn)
write(jsonn, "taxonomy.json")
